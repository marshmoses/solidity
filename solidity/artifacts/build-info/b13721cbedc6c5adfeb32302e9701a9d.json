{
	"id": "b13721cbedc6c5adfeb32302e9701a9d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.22",
	"solcLongVersion": "0.8.22+commit.4fc1097e",
	"input": {
		"language": "Solidity",
		"sources": {
			"solidity/keyword.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n//VIEW\r\n//contract View{\r\n    //uint256 Num1=2;\r\n    //uint256 Num2=7;\r\n    //using view to check state variable\r\n    //function getResults()public view returns(uint256,uint256 ){\r\n        //return (Num1, Num2);\r\n    //}\r\n    //calculations\r\n    //function getResults()public view returns(uint256 product,uint256 total){\r\n        /////uint256 Num1=20;\r\n        //uint256 Num2=30;\r\n\r\n        //product =Num1*Num2;\r\n        //total=Num1+Num2;\r\n    //}\r\n    //\r\n\r\n    //PURE KEYWORD\r\n//}\r\n//contract Pure{\r\n    //uint256 num1=4;\r\n    ////uint256 num2=10;\r\n\r\n    //function getData() public view returns(uint256 ,uint256){\r\n        //uint256 muNum1=30;\r\n        //uint256 muNum2=50;\r\n        ////uint256 product=muNum1*num1;\r\n        //uint256 total=muNum2*num2;\r\n        //return (product,total);\r\n    //}\r\n\r\n\r\n//}\r\n//EVENT TICKET\r\n//hAPPENNED TO REMOVE(public)\r\n//contract EventTicket {\r\n    //uint256  numberofTicket;\r\n    //uint256  ticketPrice;\r\n    //uint256  totalAmount;\r\n    //uint256  startAt;\r\n    //uint256 endAt;\r\n    //uint256  timestamp;\r\n    //string   message = \"Buy your first EVENT Ticket\";\r\n\r\n    //constructor(uint256 _ticketPrice) {\r\n        ////ticketPrice = _ticketPrice;\r\n        //startAt = block.timestamp;\r\n       // endAt = block.timestamp + 7 days;\r\n       // timestamp = (endAt - (startAt + 7 days)) / 60 / 60 / 24;\r\n    //}\r\n    //function buyTicket(uint256 _value)public returns(uint256 ticketId){\r\n       // numberofTicket++;\r\n        //totalAmount+=_value;\r\n        //ticketId=numberofTicket;\r\n    //}\r\n    //function getAmount()public view returns(uint256){\r\n       // return totalAmount;\r\n\r\n    //}\r\n//}\r\n\r\n\r\n//CONSTANTS\r\n//contract Constants{\r\n    //128613 transcation gas\r\n    //address public myAdd =0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\r\n    //102761 transcation cost after definining \r\n    //address public constant MY_ADDR =0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\r\n\r\n//}\r\n//IF ELSE\r\n//contract IfElse{\r\n    //uint256 public myNum =5;\r\n    //string public myString;\r\n    //function get(uint256 _num)public returns(string memory){\r\n       // if(_num ==5){\r\n            //myString =\"Hey the value of myNum is 5\";\r\n       // } else{\r\n            //myString =\"Not 5\";\r\n        //}\r\n    //}\r\n    //function ShortHand(uint256 _num)public returns(string memory){\r\n       // tranuorial operator\r\n       //return _num ==5 ? myString =\"moses\" :myString = \"No buddy\";\r\n    //}\r\n\r\n//}\r\n//LOOP\r\n//WHILE LOOP\r\n//contract whileLoop{\r\n    //while(ccondition){\r\n        //statement or block of code to be executed if the condition is true\r\n        //uint256[]data;\r\n        //uint8 k=0;\r\n        //function loop()public returns (uint256[]memory){\r\n            //while(k < 5){\r\n                //k++;\r\n                //data.push(k);\r\n\r\n            //}\r\n            //return data;\r\n        //}\r\n\r\n    \r\n//}\r\n//DO -WHILE LOOP\r\n//contract DoWhile{\r\n    //do{\r\n        //block of statement to be executed\r\n        //}while(condition)\r\n        //uint256[]data;\r\n        //uint8 j=0;\r\n        //function loop()public returns (uint256[]memory){\r\n           // do{\r\n                //j++;\r\n                //data.push(j);\r\n\r\n            //}while(j < 5);\r\n            //return data;\r\n       // }\r\n//}\r\n\r\n\r\n//FOR LOOP\r\n//contract ForLoop{\r\n    //for(initialization; test condition;iteration statement){\r\n      //  /sataement or block of code to be executed if the condition if fulfilled\r\n    //}\r\n    //uint256[]data;\r\n    //function loop() public returns(uint256[]memory){\r\n        //for(uint256 i =0; i <5; i++){\r\n            //data.push(i);\r\n        //}\r\n        //return data;\r\n    //}\r\n//}\r\n\r\n//ERROR HANDLING\r\n// Required statements\r\n//contract Require{\r\n    //function checkInput(uint256 _input)public view returns(string memory){\r\n        //require(_input >=0, \"invalid uint8\");\r\n        //require(_input <= 255, \"invalid uint8\");\r\n        //return \"Input is Uint8\";\r\n\r\n\r\n    //}\r\n    //function Odd(uint256 _input)public view returns(bool){\r\n        //require(_input % 2 !=0);\r\n        //return true;\r\n    //}\r\n//}\r\n\r\n\r\n\r\n//ASSERT\r\n//contract assertStatement{\r\n    //bool result;\r\n    //function checkOverFlow(uint256 _num1,uint256 _num2)public{\r\n        //uint256 sum =_num1 + _num2;\r\n        //assert(sum<=255);\r\n        //result =true;\r\n    //}\r\n    //function getResult()public view returns(string memory){\r\n        //if(result == true){\r\n            //return \"no Overflow\";\r\n\r\n        //}else{\r\n            //return \"overflow exists\";\r\n        //}\r\n    //}\r\n\r\n//}\r\n\r\n\r\n//revert handler\r\n//contract RevertStatement{\r\n    //function checkOverflow(uint256 _num1,uint256 _num2)public view returns(string memory){\r\n        //uint256 sum=_num1 + _num2;\r\n        //if (sum<0||sum >255){\r\n            //revert(\"Overflow Exist\");\r\n\r\n        //}else \r\n        //return (\"No Overflow\", sum);\r\n       \r\n    //}\r\n\r\n\r\n//}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"sources": {
			"solidity/keyword.sol": {
				"ast": {
					"absolutePath": "solidity/keyword.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:0"
						}
					],
					"src": "33:4870:0"
				},
				"id": 0
			}
		}
	}
}